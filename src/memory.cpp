#include <string.h>
#include "gb_emu.h"
#include "gameboy.h"
#include "cpu.h"
#include "sound/Gb_Apu.h"

void Gameboy::ResetMemory() {
	memset( mem.VRAM, 0, 0x4000 );
	memset( mem.workRAM, 0, 0x9000 );
	memset( mem.OAM, 0, 0x100 );
	memset( mem.highRAM, 0, 0x100 );
	mem.workRAMBankIndex = 1;
	mem.VRAMBankIndex = 0;
	mem.inputMask = 0xff;

	mem.bgPalette.index = 0;
	mem.bgPalette.autoIncrementOnWrite = false;
	mem.spritePalette.index = 0;
	mem.spritePalette.autoIncrementOnWrite = false;
	for ( int i = 0; i < 0x40; i++ ) {
		mem.bgPalette.palette[ i ] = 0xff;
		mem.spritePalette.palette[ i ] = 0xff;
	}

	// Set the default values
	//mem.highRAM[ 0x04 ] = 0x68;
	//mem.highRAM[ 0x07 ] = 0xf8;
	//mem.highRAM[ 0x0f ] = 0xe1;
	//mem.highRAM[ 0x10 ] = 0x80;
	//mem.highRAM[ 0x11 ] = 0x80;
	//mem.highRAM[ 0x12 ] = 0xf3;
	//mem.highRAM[ 0x13 ] = 0xc1;
	//mem.highRAM[ 0x14 ] = 0xbf;
	//mem.highRAM[ 0x16 ] = 0x3f;
	//mem.highRAM[ 0x19 ] = 0xbf;
	//mem.highRAM[ 0x1a ] = 0x7f;
	//mem.highRAM[ 0x1b ] = 0xff;
	//mem.highRAM[ 0x1c ] = 0x9f;
	//mem.highRAM[ 0x1e ] = 0xbf;
	//mem.highRAM[ 0x20 ] = 0xff;
	//mem.highRAM[ 0x23 ] = 0xbf;
	//mem.highRAM[ 0x24 ] = 0x77;
	//mem.highRAM[ 0x25 ] = 0xf3;
	//mem.highRAM[ 0x26 ] = 0x80;
	//mem.highRAM[ 0x40 ] = 0x91;
	//mem.highRAM[ 0x41 ] = 0x81;
	//mem.highRAM[ 0x44 ] = 0x99;
	//mem.highRAM[ 0x47 ] = 0xfc;
	//mem.highRAM[ 0x48 ] = 0xff;
	//mem.highRAM[ 0x49 ] = 0xff;
	//if ( skipBios )
	//	mem.highRAM[ 0x50 ] = 0x01;
	//mem.highRAM[ 0xfa ] = 0x39;
	//mem.highRAM[ 0xfb ] = 0x01;
	//mem.highRAM[ 0xfc ] = 0x2e;

	mem.highRAM[0x04] = 0x1E;
	mem.highRAM[0x05] = 0x00;
	mem.highRAM[0x06] = 0x00;
	mem.highRAM[0x07] = 0xF8;
	mem.highRAM[0x0F] = 0xE1;
	mem.highRAM[0x10] = 0x80;
	mem.highRAM[0x11] = 0xBF;
	mem.highRAM[0x12] = 0xF3;
	mem.highRAM[0x14] = 0xBF;
	mem.highRAM[0x16] = 0x3F;
	mem.highRAM[0x17] = 0x00;
	mem.highRAM[0x19] = 0xBF;
	mem.highRAM[0x1A] = 0x7F;
	mem.highRAM[0x1B] = 0xFF;
	mem.highRAM[0x1C] = 0x9F;
	mem.highRAM[0x1E] = 0xBF;
	mem.highRAM[0x20] = 0xFF;
	mem.highRAM[0x21] = 0x00;
	mem.highRAM[0x22] = 0x00;
	mem.highRAM[0x23] = 0xBF;
	mem.highRAM[0x24] = 0x77;
	mem.highRAM[0x25] = 0xF3;
	mem.highRAM[0x26] = 0xF1;
	mem.highRAM[0x40] = 0x91;
	mem.highRAM[0x41] = 0x85;
	mem.highRAM[0x42] = 0x00;
	mem.highRAM[0x43] = 0x00;
	mem.highRAM[0x45] = 0x00;
	mem.highRAM[0x47] = 0xFC;
	mem.highRAM[0x48] = 0xFF;
	mem.highRAM[0x49] = 0xFF;
	mem.highRAM[0x4A] = 0x00;
	mem.highRAM[0x4B] = 0x00;
	if ( skipBios )
		mem.highRAM[ 0x50 ] = 0x01;
	mem.highRAM[0xFF] = 0x00;
}

void Gameboy::Write( uint16 addr, byte value ) {
	if ( addr < 0x100 ) {
		return;
	} else if ( addr < 0x8000 ) {
		cart->Write( addr, value );
	} else if ( addr < 0xA000 ) {
		// mem.VRAM banking
		uint16 bankOffset = mem.VRAMBankIndex * 0x2000;
		mem.VRAM[ addr - 0x8000 + bankOffset ] = value;
	} else if ( addr < 0xC000 ) {
		cart->WriteRAM( addr, value );
	} else if ( addr < 0xD000 ) {
		// Work RAM, bank 0
		mem.workRAM[ addr - 0xC000 ] = value;
	} else if ( addr < 0xE000 ) {
		// Work RAM with banking
		mem.workRAM[ addr - 0xC000 + ( mem.workRAMBankIndex * 0x1000 ) ] = value;
	} else if ( addr < 0xFE00 ) {
		// Echo RAM, don't know yet what to do with that
		// DEBUG_BREAK;
	} else if ( addr < 0xFEA0 ) {
		// Object Attribute Memory
		mem.OAM[ addr - 0xFE00 ] = value;
	} else if ( addr < 0xFF00 ) {
		// Unusable memory
		// DEBUG_BREAK;
	} else {
		WriteHighRam( addr, value );
	}
}

byte Gameboy::Read( uint16 addr ) {
	if ( !cpu.IsCGB && mem.highRAM[ 0x50 ] == 0 && addr < 0x100 ) {
		return DMG_BIOS[ addr ];
	}
	if ( cpu.IsCGB && mem.highRAM[ 0x50 ] == 0 && (addr < 0x100 || addr >= 0x200) ) {
		return CGB_BIOS[ addr ];
	}
	switch ( ( addr & 0xf000 ) >> 12 ) { // Switch on 4th byte
		case 0x0:
		case 0x1:
		case 0x2:
		case 0x3:
		case 0x4:
		case 0x5:
		case 0x6:
		case 0x7:
			return cart->Read( addr );

		case 0x8:
		case 0x9: {
			// mem.VRAM banking
			uint16 bankOffset = mem.VRAMBankIndex * 0x2000;
			return mem.VRAM[ addr - 0x8000 + bankOffset ];
		}

		case 0xa:
		case 0xb:
			return cart->Read( addr );

		case 0xc:
			// Work RAM, bank 0
			return mem.workRAM[ addr - 0xc000 ];
		case 0xd:
			// Work RAM with banking
			return mem.workRAM[ addr - 0xc000 + ( mem.workRAMBankIndex * 0x1000 ) ];
		case 0xe:
		case 0xf: {
			if ( addr < 0xFE00 ) {
				// ECHO RAM
				return mem.workRAM[ addr - 0xe000 ];
			} else if ( addr < 0xFEA0 ) {
				// Object Attribute Memory
				return mem.OAM[ addr - 0xFE00 ];
			} else if ( addr < 0xFF00 ) {
				// Unusable memory
				return 0;
			} else {
				return ReadHighRam( addr );
			}
		}
	}
	return 0x0;
}

byte Gameboy::ReadHighRam( uint16 addr ) {
	if ( addr == 0xff00 ) {
		// JOYPAD
		byte columnMask = mem.highRAM[ 0x0 ];
		byte val = 0xf;
		if ( BIT_IS_SET( columnMask, 4 ) ) {
			val = mem.inputMask & 0xf;
		} else if ( BIT_IS_SET( columnMask, 5 ) ) {
			val = ( mem.inputMask >> 4 ) & 0xf;
		}
		return columnMask | 0xc0 | val;
	} else if ( addr >= 0xff10 && addr <= 0xff3f ) {
		return apu.read_register( cpu.cpuTime * APU_OVERCLOCKING, addr );
	} else if ( addr == 0xff0f ) {
		return mem.highRAM[ 0x0f ] | 0xe0;
	} else if ( addr > 0xff72 && addr <= 0xff77 ) {
		// Unkown
		DEBUG_BREAK;
	} else if ( addr == 0xff68 ) {
		if ( cpu.IsCGB )
			return mem.bgPalette.index;
	} else if ( addr == 0xff69 ) {
		if ( cpu.IsCGB )
			return mem.bgPalette.Read();
	} else if ( addr == 0xff6a ) {
		if ( cpu.IsCGB )
			return mem.spritePalette.index;
	} else if ( addr == 0xff6b ) {
		if ( cpu.IsCGB )
			return mem.spritePalette.Read();
	} else if ( addr == 0xff4d ) {
		return ( cpu.speed - 1 ) << 7 | ( cpu.speedSwitchRequested ? 1 : 0 );
	} else if ( addr == 0xff4f ) {
		return mem.VRAMBankIndex;
	} else if ( addr == 0xff70 ) {
		return mem.workRAMBankIndex;
	} else {
		return mem.highRAM[ addr - 0xff00 ];
	}
	return 0;
}

void Gameboy::WriteHighRam( uint16 addr, byte value ) {
	if ( addr >= 0xfa0 && addr < 0xfeff ) {
		// You can't write here, sorry!
		return;
	} else if ( addr >= 0xff10 && addr <= 0xff3f ) {
		mem.highRAM[ addr - 0xff00 ] = value;
		apu.write_register( cpu.cpuTime * APU_OVERCLOCKING, addr, value );
		return;
	}

	byte lowPart = BIT_LOW_8( addr );

	switch ( lowPart ) {
		case 0x02:
			// DEBUG_BREAK; // Serial transfer control
			break;
		case 0x04:
			// Divider register
			cpu.clockCounter = 0;
			cpu.divider = 0;
			mem.highRAM[ lowPart ] = 0;
			break;
		case 0x05:
		case 0x06:
			// TIMA and TMA
			mem.highRAM[ lowPart ] = value;
			break;
		case 0x07: {
			// Tac
			byte currentFreq = mem.highRAM[ lowPart ] & 0x3;
			mem.highRAM[ lowPart ] = value | 0xf8;
			byte newValue = mem.highRAM[ lowPart ] & 0x3;
			if ( currentFreq != newValue ) {
				cpu.clockCounter = 0;
			}
			break;
		}
		case 0x41:
			mem.highRAM[ 0x41 ] = value | 0x80;
			break;
		case 0x44:
			// Scanline register
			mem.highRAM[ 0x44 ] = value;
			break;
		case 0x46:
			DMATransfer( value );
			break;
		case 0x4d:
			if ( cpu.IsCGB ) {
				cpu.speedSwitchRequested = BIT_IS_SET( value, 0 );
			}
			break;
		case 0x4f:
			if ( cpu.IsCGB && !mem.hdmaActive ) {
				mem.VRAMBankIndex = value & 0x1;
			}
			break;
		case 0x55:
			if ( cpu.IsCGB ) {
				DMATransfer( value );
			}
			break;
		case 0x68:
			if ( cpu.IsCGB ) {
				mem.bgPalette.index = value & 0x3f;
				mem.bgPalette.autoIncrementOnWrite = BIT_IS_SET( value, 7 );
			}
			break;
		case 0x69:
			if ( cpu.IsCGB ) {
				mem.bgPalette.Write( value );
			}
			break;
		case 0x6a:
			if ( cpu.IsCGB ) {
				mem.spritePalette.index = value & 0x3f;
				mem.spritePalette.autoIncrementOnWrite = BIT_IS_SET( value, 7 );
			}
			break;
		case 0x6b:
			if ( cpu.IsCGB ) {
				mem.spritePalette.Write( value );
			}
			break;
		case 0x70:
			if ( cpu.IsCGB ) {
				mem.workRAMBankIndex = value & 0x7;
				if ( mem.workRAMBankIndex == 0 ) {
					mem.workRAMBankIndex = 1;
				}
			}
			break;
		default:
			mem.highRAM[ lowPart ] = value;
	}
}

void Gameboy::DMATransfer( byte value ) {
	uint16 addr = (uint16)value << 8;
	for ( uint16 i = 0; i < 0xa0; i++ ) {
		Write( 0xfe00 + i, Read( addr + i ) );
	}
}

void Gameboy::HDMATransfer() {
	if ( !mem.hdmaActive ) {
		return;
	}

	uint16 source = (uint16)mem.highRAM[ 0x51 ] << 8 | (uint16)mem.highRAM[ 0x52 ] & 0xfff0;
	uint16 dest = (uint16)mem.highRAM[ 0x53 ] << 8 | (uint16)mem.highRAM[ 0x54 ] & 0x1ff0;
	dest += 0x8000;

	for ( uint16 i = 0; i < 0x10; i++ ) {
		Write( dest, Read( source ) );
		dest++;
		source++;
	}

	mem.highRAM[ 0x51 ] = BIT_HIGH_8( source );
	mem.highRAM[ 0x52 ] = BIT_LOW_8( source );
	mem.highRAM[ 0x53 ] = BIT_HIGH_8( dest );
	mem.highRAM[ 0x54 ] = dest & 0xf0;

	if ( mem.hdmaLength > 0 ) {
		mem.hdmaLength--;
		mem.highRAM[ 0x55 ] = mem.hdmaLength;
	} else {
		// HDMA has finished
		mem.highRAM[ 0x55 ] = 0xff;
		mem.hdmaActive = false;
	}
}

void Gameboy::RaiseInterupt( byte code ) {
	byte mask = Read( 0xff0f );
	mask = BIT_SET( mask, code );
	Write( 0xff0f, mask );
}

byte Gameboy::DMG_BIOS[ 0x100 ] = {
	0x31, 0xFE, 0xFF, 0xAF, 0x21, 0xFF, 0x9F, 0x32, 0xCB, 0x7C, 0x20, 0xFB, 0x21, 0x26, 0xFF, 0x0E, 0x11, 0x3E, 0x80, 0x32, 0xE2, 0x0C, 0x3E, 0xF3, 0xE2, 0x32,
	0x3E, 0x77, 0x77, 0x3E, 0xFC, 0xE0, 0x47, 0x11, 0x04, 0x01, 0x21, 0x10, 0x80, 0x1A, 0xCD, 0x95, 0x00, 0xCD, 0x96, 0x00, 0x13, 0x7B, 0xFE, 0x34, 0x20, 0xF3,
	0x11, 0xD8, 0x00, 0x06, 0x08, 0x1A, 0x13, 0x22, 0x23, 0x05, 0x20, 0xF9, 0x3E, 0x19, 0xEA, 0x10, 0x99, 0x21, 0x2F, 0x99, 0x0E, 0x0C, 0x3D, 0x28, 0x08, 0x32,
	0x0D, 0x20, 0xF9, 0x2E, 0x0F, 0x18, 0xF3, 0x67, 0x3E, 0x64, 0x57, 0xE0, 0x42, 0x3E, 0x91, 0xE0, 0x40, 0x04, 0x1E, 0x02, 0x0E, 0x0C, 0xF0, 0x44, 0xFE, 0x90,
	0x20, 0xFA, 0x0D, 0x20, 0xF7, 0x1D, 0x20, 0xF2, 0x0E, 0x13, 0x24, 0x7C, 0x1E, 0x83, 0xFE, 0x62, 0x28, 0x06, 0x1E, 0xC1, 0xFE, 0x64, 0x20, 0x06, 0x7B, 0xE2,
	0x0C, 0x3E, 0x87, 0xF2, 0xF0, 0x42, 0x90, 0xE0, 0x42, 0x15, 0x20, 0xD2, 0x05, 0x20, 0x4F, 0x16, 0x20, 0x18, 0xCB, 0x4F, 0x06, 0x04, 0xC5, 0xCB, 0x11, 0x17,
	0xC1, 0xCB, 0x11, 0x17, 0x05, 0x20, 0xF5, 0x22, 0x23, 0x22, 0x23, 0xC9, 0xCE, 0xED, 0x66, 0x66, 0xCC, 0x0D, 0x00, 0x0B, 0x03, 0x73, 0x00, 0x83, 0x00, 0x0C,
	0x00, 0x0D, 0x00, 0x08, 0x11, 0x1F, 0x88, 0x89, 0x00, 0x0E, 0xDC, 0xCC, 0x6E, 0xE6, 0xDD, 0xDD, 0xD9, 0x99, 0xBB, 0xBB, 0x67, 0x63, 0x6E, 0x0E, 0xEC, 0xCC,
	0xDD, 0xDC, 0x99, 0x9F, 0xBB, 0xB9, 0x33, 0x3E, 0x3c, 0x42, 0xB9, 0xA5, 0xB9, 0xA5, 0x42, 0x4C, 0x21, 0x04, 0x01, 0x11, 0xA8, 0x00, 0x1A, 0x13, 0xBE, 0x20,
	0xFE, 0x23, 0x7D, 0xFE, 0x34, 0x20, 0xF5, 0x06, 0x19, 0x78, 0x86, 0x23, 0x05, 0x20, 0xFB, 0x86, 0x20, 0xFE, 0x3E, 0x01, 0xE0, 0x50
};

byte Gameboy::CGB_BIOS[ 0x901 ] = {
	0x31, 0xfe, 0xff, 0x3e, 0x02, 0xc3, 0x7c, 0x00, 0xd3, 0x00, 0x98, 0xa0, 0x12, 0xd3, 0x00, 0x80, 0x00, 0x40, 0x1e, 0x53, 0xd0, 0x00, 0x1f, 0x42, 0x1c, 0x00,
	0x14, 0x2a, 0x4d, 0x19, 0x8c, 0x7e, 0x00, 0x7c, 0x31, 0x6e, 0x4a, 0x45, 0x52, 0x4a, 0x00, 0x00, 0xff, 0x53, 0x1f, 0x7c, 0xff, 0x03, 0x1f, 0x00, 0xff, 0x1f,
	0xa7, 0x00, 0xef, 0x1b, 0x1f, 0x00, 0xef, 0x1b, 0x00, 0x7c, 0x00, 0x00, 0xff, 0x03, 0xce, 0xed, 0x66, 0x66, 0xcc, 0x0d, 0x00, 0x0b, 0x03, 0x73, 0x00, 0x83,
	0x00, 0x0c, 0x00, 0x0d, 0x00, 0x08, 0x11, 0x1f, 0x88, 0x89, 0x00, 0x0e, 0xdc, 0xcc, 0x6e, 0xe6, 0xdd, 0xdd, 0xd9, 0x99, 0xbb, 0xbb, 0x67, 0x63, 0x6e, 0x0e,
	0xec, 0xcc, 0xdd, 0xdc, 0x99, 0x9f, 0xbb, 0xb9, 0x33, 0x3e, 0x3c, 0x42, 0xb9, 0xa5, 0xb9, 0xa5, 0x42, 0x3c, 0x58, 0x43, 0xe0, 0x70, 0x3e, 0xfc, 0xe0, 0x47,
	0xcd, 0x75, 0x02, 0xcd, 0x00, 0x02, 0x26, 0xd0, 0xcd, 0x03, 0x02, 0x21, 0x00, 0xfe, 0x0e, 0xa0, 0xaf, 0x22, 0x0d, 0x20, 0xfc, 0x11, 0x04, 0x01, 0x21, 0x10,
	0x80, 0x4c, 0x1a, 0xe2, 0x0c, 0xcd, 0xc6, 0x03, 0xcd, 0xc7, 0x03, 0x13, 0x7b, 0xfe, 0x34, 0x20, 0xf1, 0x11, 0x72, 0x00, 0x06, 0x08, 0x1a, 0x13, 0x22, 0x23,
	0x05, 0x20, 0xf9, 0xcd, 0xf0, 0x03, 0x3e, 0x01, 0xe0, 0x4f, 0x3e, 0x91, 0xe0, 0x40, 0x21, 0xb2, 0x98, 0x06, 0x4e, 0x0e, 0x44, 0xcd, 0x91, 0x02, 0xaf, 0xe0,
	0x4f, 0x0e, 0x80, 0x21, 0x42, 0x00, 0x06, 0x18, 0xf2, 0x0c, 0xbe, 0x20, 0xfe, 0x23, 0x05, 0x20, 0xf7, 0x21, 0x34, 0x01, 0x06, 0x19, 0x78, 0x86, 0x2c, 0x05,
	0x20, 0xfb, 0x86, 0x20, 0xfe, 0xcd, 0x1c, 0x03, 0x18, 0x02, 0x00, 0x00, 0xcd, 0xd0, 0x05, 0xaf, 0xe0, 0x70, 0x3e, 0x11, 0xe0, 0x50, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x21, 0x00, 0x80, 0xaf, 0x22, 0xcb, 0x6c, 0x28,
	0xfb, 0xc9, 0x2a, 0x12, 0x13, 0x0d, 0x20, 0xfa, 0xc9, 0xe5, 0x21, 0x0f, 0xff, 0xcb, 0x86, 0xcb, 0x46, 0x28, 0xfc, 0xe1, 0xc9, 0x11, 0x00, 0xff, 0x21, 0x03,
	0xd0, 0x0e, 0x0f, 0x3e, 0x30, 0x12, 0x3e, 0x20, 0x12, 0x1a, 0x2f, 0xa1, 0xcb, 0x37, 0x47, 0x3e, 0x10, 0x12, 0x1a, 0x2f, 0xa1, 0xb0, 0x4f, 0x7e, 0xa9, 0xe6,
	0xf0, 0x47, 0x2a, 0xa9, 0xa1, 0xb0, 0x32, 0x47, 0x79, 0x77, 0x3e, 0x30, 0x12, 0xc9, 0x3e, 0x80, 0xe0, 0x68, 0xe0, 0x6a, 0x0e, 0x6b, 0x2a, 0xe2, 0x05, 0x20,
	0xfb, 0x4a, 0x09, 0x43, 0x0e, 0x69, 0x2a, 0xe2, 0x05, 0x20, 0xfb, 0xc9, 0xc5, 0xd5, 0xe5, 0x21, 0x00, 0xd8, 0x06, 0x01, 0x16, 0x3f, 0x1e, 0x40, 0xcd, 0x4a,
	0x02, 0xe1, 0xd1, 0xc1, 0xc9, 0x3e, 0x80, 0xe0, 0x26, 0xe0, 0x11, 0x3e, 0xf3, 0xe0, 0x12, 0xe0, 0x25, 0x3e, 0x77, 0xe0, 0x24, 0x21, 0x30, 0xff, 0xaf, 0x0e,
	0x10, 0x22, 0x2f, 0x0d, 0x20, 0xfb, 0xc9, 0xcd, 0x11, 0x02, 0xcd, 0x62, 0x02, 0x79, 0xfe, 0x38, 0x20, 0x14, 0xe5, 0xaf, 0xe0, 0x4f, 0x21, 0xa7, 0x99, 0x3e,
	0x38, 0x22, 0x3c, 0xfe, 0x3f, 0x20, 0xfa, 0x3e, 0x01, 0xe0, 0x4f, 0xe1, 0xc5, 0xe5, 0x21, 0x43, 0x01, 0xcb, 0x7e, 0xcc, 0x89, 0x05, 0xe1, 0xc1, 0xcd, 0x11,
	0x02, 0x79, 0xd6, 0x30, 0xd2, 0x06, 0x03, 0x79, 0xfe, 0x01, 0xca, 0x06, 0x03, 0x7d, 0xfe, 0xd1, 0x28, 0x21, 0xc5, 0x06, 0x03, 0x0e, 0x01, 0x16, 0x03, 0x7e,
	0xe6, 0xf8, 0xb1, 0x22, 0x15, 0x20, 0xf8, 0x0c, 0x79, 0xfe, 0x06, 0x20, 0xf0, 0x11, 0x11, 0x00, 0x19, 0x05, 0x20, 0xe7, 0x11, 0xa1, 0xff, 0x19, 0xc1, 0x04,
	0x78, 0x1e, 0x83, 0xfe, 0x62, 0x28, 0x06, 0x1e, 0xc1, 0xfe, 0x64, 0x20, 0x07, 0x7b, 0xe0, 0x13, 0x3e, 0x87, 0xe0, 0x14, 0xfa, 0x02, 0xd0, 0xfe, 0x00, 0x28,
	0x0a, 0x3d, 0xea, 0x02, 0xd0, 0x79, 0xfe, 0x01, 0xca, 0x91, 0x02, 0x0d, 0xc2, 0x91, 0x02, 0xc9, 0x0e, 0x26, 0xcd, 0x4a, 0x03, 0xcd, 0x11, 0x02, 0xcd, 0x62,
	0x02, 0x0d, 0x20, 0xf4, 0xcd, 0x11, 0x02, 0x3e, 0x01, 0xe0, 0x4f, 0xcd, 0x3e, 0x03, 0xcd, 0x41, 0x03, 0xaf, 0xe0, 0x4f, 0xcd, 0x3e, 0x03, 0xc9, 0x21, 0x08,
	0x00, 0x11, 0x51, 0xff, 0x0e, 0x05, 0xcd, 0x0a, 0x02, 0xc9, 0xc5, 0xd5, 0xe5, 0x21, 0x40, 0xd8, 0x0e, 0x20, 0x7e, 0xe6, 0x1f, 0xfe, 0x1f, 0x28, 0x01, 0x3c,
	0x57, 0x2a, 0x07, 0x07, 0x07, 0xe6, 0x07, 0x47, 0x3a, 0x07, 0x07, 0x07, 0xe6, 0x18, 0xb0, 0xfe, 0x1f, 0x28, 0x01, 0x3c, 0x0f, 0x0f, 0x0f, 0x47, 0xe6, 0xe0,
	0xb2, 0x22, 0x78, 0xe6, 0x03, 0x5f, 0x7e, 0x0f, 0x0f, 0xe6, 0x1f, 0xfe, 0x1f, 0x28, 0x01, 0x3c, 0x07, 0x07, 0xb3, 0x22, 0x0d, 0x20, 0xc7, 0xe1, 0xd1, 0xc1,
	0xc9, 0x0e, 0x00, 0x1a, 0xe6, 0xf0, 0xcb, 0x49, 0x28, 0x02, 0xcb, 0x37, 0x47, 0x23, 0x7e, 0xb0, 0x22, 0x1a, 0xe6, 0x0f, 0xcb, 0x49, 0x20, 0x02, 0xcb, 0x37,
	0x47, 0x23, 0x7e, 0xb0, 0x22, 0x13, 0xcb, 0x41, 0x28, 0x0d, 0xd5, 0x11, 0xf8, 0xff, 0xcb, 0x49, 0x28, 0x03, 0x11, 0x08, 0x00, 0x19, 0xd1, 0x0c, 0x79, 0xfe,
	0x18, 0x20, 0xcc, 0xc9, 0x47, 0xd5, 0x16, 0x04, 0x58, 0xcb, 0x10, 0x17, 0xcb, 0x13, 0x17, 0x15, 0x20, 0xf6, 0xd1, 0x22, 0x23, 0x22, 0x23, 0xc9, 0x3e, 0x19,
	0xea, 0x10, 0x99, 0x21, 0x2f, 0x99, 0x0e, 0x0c, 0x3d, 0x28, 0x08, 0x32, 0x0d, 0x20, 0xf9, 0x2e, 0x0f, 0x18, 0xf3, 0xc9, 0x3e, 0x01, 0xe0, 0x4f, 0xcd, 0x00,
	0x02, 0x11, 0x07, 0x06, 0x21, 0x80, 0x80, 0x0e, 0xc0, 0x1a, 0x22, 0x23, 0x22, 0x23, 0x13, 0x0d, 0x20, 0xf7, 0x11, 0x04, 0x01, 0xcd, 0x8f, 0x03, 0x01, 0xa8,
	0xff, 0x09, 0xcd, 0x8f, 0x03, 0x01, 0xf8, 0xff, 0x09, 0x11, 0x72, 0x00, 0x0e, 0x08, 0x23, 0x1a, 0x22, 0x13, 0x0d, 0x20, 0xf9, 0x21, 0xc2, 0x98, 0x06, 0x08,
	0x3e, 0x08, 0x0e, 0x10, 0x22, 0x0d, 0x20, 0xfc, 0x11, 0x10, 0x00, 0x19, 0x05, 0x20, 0xf3, 0xaf, 0xe0, 0x4f, 0x21, 0xc2, 0x98, 0x3e, 0x08, 0x22, 0x3c, 0xfe,
	0x18, 0x20, 0x02, 0x2e, 0xe2, 0xfe, 0x28, 0x20, 0x03, 0x21, 0x02, 0x99, 0xfe, 0x38, 0x20, 0xed, 0x21, 0xd8, 0x08, 0x11, 0x40, 0xd8, 0x06, 0x08, 0x3e, 0xff,
	0x12, 0x13, 0x12, 0x13, 0x0e, 0x02, 0xcd, 0x0a, 0x02, 0x3e, 0x00, 0x12, 0x13, 0x12, 0x13, 0x13, 0x13, 0x05, 0x20, 0xea, 0xcd, 0x62, 0x02, 0x21, 0x4b, 0x01,
	0x7e, 0xfe, 0x33, 0x20, 0x0b, 0x2e, 0x44, 0x1e, 0x30, 0x2a, 0xbb, 0x20, 0x49, 0x1c, 0x18, 0x04, 0x2e, 0x4b, 0x1e, 0x01, 0x2a, 0xbb, 0x20, 0x3e, 0x2e, 0x34,
	0x01, 0x10, 0x00, 0x2a, 0x80, 0x47, 0x0d, 0x20, 0xfa, 0xea, 0x00, 0xd0, 0x21, 0xc7, 0x06, 0x0e, 0x00, 0x2a, 0xb8, 0x28, 0x08, 0x0c, 0x79, 0xfe, 0x4f, 0x20,
	0xf6, 0x18, 0x1f, 0x79, 0xd6, 0x41, 0x38, 0x1c, 0x21, 0x16, 0x07, 0x16, 0x00, 0x5f, 0x19, 0xfa, 0x37, 0x01, 0x57, 0x7e, 0xba, 0x28, 0x0d, 0x11, 0x0e, 0x00,
	0x19, 0x79, 0x83, 0x4f, 0xd6, 0x5e, 0x38, 0xed, 0x0e, 0x00, 0x21, 0x33, 0x07, 0x06, 0x00, 0x09, 0x7e, 0xe6, 0x1f, 0xea, 0x08, 0xd0, 0x7e, 0xe6, 0xe0, 0x07,
	0x07, 0x07, 0xea, 0x0b, 0xd0, 0xcd, 0xe9, 0x04, 0xc9, 0x11, 0x91, 0x07, 0x21, 0x00, 0xd9, 0xfa, 0x0b, 0xd0, 0x47, 0x0e, 0x1e, 0xcb, 0x40, 0x20, 0x02, 0x13,
	0x13, 0x1a, 0x22, 0x20, 0x02, 0x1b, 0x1b, 0xcb, 0x48, 0x20, 0x02, 0x13, 0x13, 0x1a, 0x22, 0x13, 0x13, 0x20, 0x02, 0x1b, 0x1b, 0xcb, 0x50, 0x28, 0x05, 0x1b,
	0x2b, 0x1a, 0x22, 0x13, 0x1a, 0x22, 0x13, 0x0d, 0x20, 0xd7, 0x21, 0x00, 0xd9, 0x11, 0x00, 0xda, 0xcd, 0x64, 0x05, 0xc9, 0x21, 0x12, 0x00, 0xfa, 0x05, 0xd0,
	0x07, 0x07, 0x06, 0x00, 0x4f, 0x09, 0x11, 0x40, 0xd8, 0x06, 0x08, 0xe5, 0x0e, 0x02, 0xcd, 0x0a, 0x02, 0x13, 0x13, 0x13, 0x13, 0x13, 0x13, 0xe1, 0x05, 0x20,
	0xf0, 0x11, 0x42, 0xd8, 0x0e, 0x02, 0xcd, 0x0a, 0x02, 0x11, 0x4a, 0xd8, 0x0e, 0x02, 0xcd, 0x0a, 0x02, 0x2b, 0x2b, 0x11, 0x44, 0xd8, 0x0e, 0x02, 0xcd, 0x0a,
	0x02, 0xc9, 0x0e, 0x60, 0x2a, 0xe5, 0xc5, 0x21, 0xe8, 0x07, 0x06, 0x00, 0x4f, 0x09, 0x0e, 0x08, 0xcd, 0x0a, 0x02, 0xc1, 0xe1, 0x0d, 0x20, 0xec, 0xc9, 0xfa,
	0x08, 0xd0, 0x11, 0x18, 0x00, 0x3c, 0x3d, 0x28, 0x03, 0x19, 0x20, 0xfa, 0xc9, 0xcd, 0x1d, 0x02, 0x78, 0xe6, 0xff, 0x28, 0x0f, 0x21, 0xe4, 0x08, 0x06, 0x00,
	0x2a, 0xb9, 0x28, 0x08, 0x04, 0x78, 0xfe, 0x0c, 0x20, 0xf6, 0x18, 0x2d, 0x78, 0xea, 0x05, 0xd0, 0x3e, 0x1e, 0xea, 0x02, 0xd0, 0x11, 0x0b, 0x00, 0x19, 0x56,
	0x7a, 0xe6, 0x1f, 0x5f, 0x21, 0x08, 0xd0, 0x3a, 0x22, 0x7b, 0x77, 0x7a, 0xe6, 0xe0, 0x07, 0x07, 0x07, 0x5f, 0x21, 0x0b, 0xd0, 0x3a, 0x22, 0x7b, 0x77, 0xcd,
	0xe9, 0x04, 0xcd, 0x28, 0x05, 0xc9, 0xcd, 0x11, 0x02, 0xfa, 0x43, 0x01, 0xcb, 0x7f, 0x28, 0x04, 0xe0, 0x4c, 0x18, 0x28, 0x3e, 0x04, 0xe0, 0x4c, 0x3e, 0x01,
	0xe0, 0x6c, 0x21, 0x00, 0xda, 0xcd, 0x7b, 0x05, 0x06, 0x10, 0x16, 0x00, 0x1e, 0x08, 0xcd, 0x4a, 0x02, 0x21, 0x7a, 0x00, 0xfa, 0x00, 0xd0, 0x47, 0x0e, 0x02,
	0x2a, 0xb8, 0xcc, 0xda, 0x03, 0x0d, 0x20, 0xf8, 0xc9, 0x01, 0x0f, 0x3f, 0x7e, 0xff, 0xff, 0xc0, 0x00, 0xc0, 0xf0, 0xf1, 0x03, 0x7c, 0xfc, 0xfe, 0xfe, 0x03,
	0x07, 0x07, 0x0f, 0xe0, 0xe0, 0xf0, 0xf0, 0x1e, 0x3e, 0x7e, 0xfe, 0x0f, 0x0f, 0x1f, 0x1f, 0xff, 0xff, 0x00, 0x00, 0x01, 0x01, 0x01, 0x03, 0xff, 0xff, 0xe1,
	0xe0, 0xc0, 0xf0, 0xf9, 0xfb, 0x1f, 0x7f, 0xf8, 0xe0, 0xf3, 0xfd, 0x3e, 0x1e, 0xe0, 0xf0, 0xf9, 0x7f, 0x3e, 0x7c, 0xf8, 0xe0, 0xf8, 0xf0, 0xf0, 0xf8, 0x00,
	0x00, 0x7f, 0x7f, 0x07, 0x0f, 0x9f, 0xbf, 0x9e, 0x1f, 0xff, 0xff, 0x0f, 0x1e, 0x3e, 0x3c, 0xf1, 0xfb, 0x7f, 0x7f, 0xfe, 0xde, 0xdf, 0x9f, 0x1f, 0x3f, 0x3e,
	0x3c, 0xf8, 0xf8, 0x00, 0x00, 0x03, 0x03, 0x07, 0x07, 0xff, 0xff, 0xc1, 0xc0, 0xf3, 0xe7, 0xf7, 0xf3, 0xc0, 0xc0, 0xc0, 0xc0, 0x1f, 0x1f, 0x1e, 0x3e, 0x3f,
	0x1f, 0x3e, 0x3e, 0x80, 0x00, 0x00, 0x00, 0x7c, 0x1f, 0x07, 0x00, 0x0f, 0xff, 0xfe, 0x00, 0x7c, 0xf8, 0xf0, 0x00, 0x1f, 0x0f, 0x0f, 0x00, 0x7c, 0xf8, 0xf8,
	0x00, 0x3f, 0x3e, 0x1c, 0x00, 0x0f, 0x0f, 0x0f, 0x00, 0x7c, 0xff, 0xff, 0x00, 0x00, 0xf8, 0xf8, 0x00, 0x07, 0x0f, 0x0f, 0x00, 0x81, 0xff, 0xff, 0x00, 0xf3,
	0xe1, 0x80, 0x00, 0xe0, 0xff, 0x7f, 0x00, 0xfc, 0xf0, 0xc0, 0x00, 0x3e, 0x7c, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x88, 0x16, 0x36, 0xd1, 0xdb, 0xf2,
	0x3c, 0x8c, 0x92, 0x3d, 0x5c, 0x58, 0xc9, 0x3e, 0x70, 0x1d, 0x59, 0x69, 0x19, 0x35, 0xa8, 0x14, 0xaa, 0x75, 0x95, 0x99, 0x34, 0x6f, 0x15, 0xff, 0x97, 0x4b,
	0x90, 0x17, 0x10, 0x39, 0xf7, 0xf6, 0xa2, 0x49, 0x4e, 0x43, 0x68, 0xe0, 0x8b, 0xf0, 0xce, 0x0c, 0x29, 0xe8, 0xb7, 0x86, 0x9a, 0x52, 0x01, 0x9d, 0x71, 0x9c,
	0xbd, 0x5d, 0x6d, 0x67, 0x3f, 0x6b, 0xb3, 0x46, 0x28, 0xa5, 0xc6, 0xd3, 0x27, 0x61, 0x18, 0x66, 0x6a, 0xbf, 0x0d, 0xf4, 0x42, 0x45, 0x46, 0x41, 0x41, 0x52,
	0x42, 0x45, 0x4b, 0x45, 0x4b, 0x20, 0x52, 0x2d, 0x55, 0x52, 0x41, 0x52, 0x20, 0x49, 0x4e, 0x41, 0x49, 0x4c, 0x49, 0x43, 0x45, 0x20, 0x52, 0x7c, 0x08, 0x12,
	0xa3, 0xa2, 0x07, 0x87, 0x4b, 0x20, 0x12, 0x65, 0xa8, 0x16, 0xa9, 0x86, 0xb1, 0x68, 0xa0, 0x87, 0x66, 0x12, 0xa1, 0x30, 0x3c, 0x12, 0x85, 0x12, 0x64, 0x1b,
	0x07, 0x06, 0x6f, 0x6e, 0x6e, 0xae, 0xaf, 0x6f, 0xb2, 0xaf, 0xb2, 0xa8, 0xab, 0x6f, 0xaf, 0x86, 0xae, 0xa2, 0xa2, 0x12, 0xaf, 0x13, 0x12, 0xa1, 0x6e, 0xaf,
	0xaf, 0xad, 0x06, 0x4c, 0x6e, 0xaf, 0xaf, 0x12, 0x7c, 0xac, 0xa8, 0x6a, 0x6e, 0x13, 0xa0, 0x2d, 0xa8, 0x2b, 0xac, 0x64, 0xac, 0x6d, 0x87, 0xbc, 0x60, 0xb4,
	0x13, 0x72, 0x7c, 0xb5, 0xae, 0xae, 0x7c, 0x7c, 0x65, 0xa2, 0x6c, 0x64, 0x85, 0x80, 0xb0, 0x40, 0x88, 0x20, 0x68, 0xde, 0x00, 0x70, 0xde, 0x20, 0x78, 0x20,
	0x20, 0x38, 0x20, 0xb0, 0x90, 0x20, 0xb0, 0xa0, 0xe0, 0xb0, 0xc0, 0x98, 0xb6, 0x48, 0x80, 0xe0, 0x50, 0x1e, 0x1e, 0x58, 0x20, 0xb8, 0xe0, 0x88, 0xb0, 0x10,
	0x20, 0x00, 0x10, 0x20, 0xe0, 0x18, 0xe0, 0x18, 0x00, 0x18, 0xe0, 0x20, 0xa8, 0xe0, 0x20, 0x18, 0xe0, 0x00, 0x20, 0x18, 0xd8, 0xc8, 0x18, 0xe0, 0x00, 0xe0,
	0x40, 0x28, 0x28, 0x28, 0x18, 0xe0, 0x60, 0x20, 0x18, 0xe0, 0x00, 0x00, 0x08, 0xe0, 0x18, 0x30, 0xd0, 0xd0, 0xd0, 0x20, 0xe0, 0xe8, 0xff, 0x7f, 0xbf, 0x32,
	0xd0, 0x00, 0x00, 0x00, 0x9f, 0x63, 0x79, 0x42, 0xb0, 0x15, 0xcb, 0x04, 0xff, 0x7f, 0x31, 0x6e, 0x4a, 0x45, 0x00, 0x00, 0xff, 0x7f, 0xef, 0x1b, 0x00, 0x02,
	0x00, 0x00, 0xff, 0x7f, 0x1f, 0x42, 0xf2, 0x1c, 0x00, 0x00, 0xff, 0x7f, 0x94, 0x52, 0x4a, 0x29, 0x00, 0x00, 0xff, 0x7f, 0xff, 0x03, 0x2f, 0x01, 0x00, 0x00,
	0xff, 0x7f, 0xef, 0x03, 0xd6, 0x01, 0x00, 0x00, 0xff, 0x7f, 0xb5, 0x42, 0xc8, 0x3d, 0x00, 0x00, 0x74, 0x7e, 0xff, 0x03, 0x80, 0x01, 0x00, 0x00, 0xff, 0x67,
	0xac, 0x77, 0x13, 0x1a, 0x6b, 0x2d, 0xd6, 0x7e, 0xff, 0x4b, 0x75, 0x21, 0x00, 0x00, 0xff, 0x53, 0x5f, 0x4a, 0x52, 0x7e, 0x00, 0x00, 0xff, 0x4f, 0xd2, 0x7e,
	0x4c, 0x3a, 0xe0, 0x1c, 0xed, 0x03, 0xff, 0x7f, 0x5f, 0x25, 0x00, 0x00, 0x6a, 0x03, 0x1f, 0x02, 0xff, 0x03, 0xff, 0x7f, 0xff, 0x7f, 0xdf, 0x01, 0x12, 0x01,
	0x00, 0x00, 0x1f, 0x23, 0x5f, 0x03, 0xf2, 0x00, 0x09, 0x00, 0xff, 0x7f, 0xea, 0x03, 0x1f, 0x01, 0x00, 0x00, 0x9f, 0x29, 0x1a, 0x00, 0x0c, 0x00, 0x00, 0x00,
	0xff, 0x7f, 0x7f, 0x02, 0x1f, 0x00, 0x00, 0x00, 0xff, 0x7f, 0xe0, 0x03, 0x06, 0x02, 0x20, 0x01, 0xff, 0x7f, 0xeb, 0x7e, 0x1f, 0x00, 0x00, 0x7c, 0xff, 0x7f,
	0xff, 0x3f, 0x00, 0x7e, 0x1f, 0x00, 0xff, 0x7f, 0xff, 0x03, 0x1f, 0x00, 0x00, 0x00, 0xff, 0x03, 0x1f, 0x00, 0x0c, 0x00, 0x00, 0x00, 0xff, 0x7f, 0x3f, 0x03,
	0x93, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x42, 0x7f, 0x03, 0xff, 0x7f, 0xff, 0x7f, 0x8c, 0x7e, 0x00, 0x7c, 0x00, 0x00, 0xff, 0x7f, 0xef, 0x1b, 0x80, 0x61,
	0x00, 0x00, 0xff, 0x7f, 0x00, 0x7c, 0xe0, 0x03, 0x1f, 0x7c, 0x1f, 0x00, 0xff, 0x03, 0x40, 0x41, 0x42, 0x20, 0x21, 0x22, 0x80, 0x81, 0x82, 0x10, 0x11, 0x12,
	0x12, 0xb0, 0x79, 0xb8, 0xad, 0x16, 0x17, 0x07, 0xba, 0x05, 0x7c, 0x13, 0x00, 0x00, 0x00, 0x00, 0x0a,
};
