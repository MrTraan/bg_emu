#include <string.h>
#include "gb_emu.h"
#include "memory.h"

static byte basicROM[0x8000];
static byte BIOS[0x100] = {
	0x31, 0xFE, 0xFF, 0xAF, 0x21, 0xFF, 0x9F, 0x32, 0xCB, 0x7C, 0x20, 0xFB, 0x21, 0x26, 0xFF, 0x0E,
	0x11, 0x3E, 0x80, 0x32, 0xE2, 0x0C, 0x3E, 0xF3, 0xE2, 0x32, 0x3E, 0x77, 0x77, 0x3E, 0xFC, 0xE0,
	0x47, 0x11, 0x04, 0x01, 0x21, 0x10, 0x80, 0x1A, 0xCD, 0x95, 0x00, 0xCD, 0x96, 0x00, 0x13, 0x7B,
	0xFE, 0x34, 0x20, 0xF3, 0x11, 0xD8, 0x00, 0x06, 0x08, 0x1A, 0x13, 0x22, 0x23, 0x05, 0x20, 0xF9,
	0x3E, 0x19, 0xEA, 0x10, 0x99, 0x21, 0x2F, 0x99, 0x0E, 0x0C, 0x3D, 0x28, 0x08, 0x32, 0x0D, 0x20,
	0xF9, 0x2E, 0x0F, 0x18, 0xF3, 0x67, 0x3E, 0x64, 0x57, 0xE0, 0x42, 0x3E, 0x91, 0xE0, 0x40, 0x04,
	0x1E, 0x02, 0x0E, 0x0C, 0xF0, 0x44, 0xFE, 0x90, 0x20, 0xFA, 0x0D, 0x20, 0xF7, 0x1D, 0x20, 0xF2,
	0x0E, 0x13, 0x24, 0x7C, 0x1E, 0x83, 0xFE, 0x62, 0x28, 0x06, 0x1E, 0xC1, 0xFE, 0x64, 0x20, 0x06,
	0x7B, 0xE2, 0x0C, 0x3E, 0x87, 0xF2, 0xF0, 0x42, 0x90, 0xE0, 0x42, 0x15, 0x20, 0xD2, 0x05, 0x20,
	0x4F, 0x16, 0x20, 0x18, 0xCB, 0x4F, 0x06, 0x04, 0xC5, 0xCB, 0x11, 0x17, 0xC1, 0xCB, 0x11, 0x17,
	0x05, 0x20, 0xF5, 0x22, 0x23, 0x22, 0x23, 0xC9, 0xCE, 0xED, 0x66, 0x66, 0xCC, 0x0D, 0x00, 0x0B,
	0x03, 0x73, 0x00, 0x83, 0x00, 0x0C, 0x00, 0x0D, 0x00, 0x08, 0x11, 0x1F, 0x88, 0x89, 0x00, 0x0E,
	0xDC, 0xCC, 0x6E, 0xE6, 0xDD, 0xDD, 0xD9, 0x99, 0xBB, 0xBB, 0x67, 0x63, 0x6E, 0x0E, 0xEC, 0xCC,
	0xDD, 0xDC, 0x99, 0x9F, 0xBB, 0xB9, 0x33, 0x3E, 0x3c, 0x42, 0xB9, 0xA5, 0xB9, 0xA5, 0x42, 0x4C,
	0x21, 0x04, 0x01, 0x11, 0xA8, 0x00, 0x1A, 0x13, 0xBE, 0x20, 0xFE, 0x23, 0x7D, 0xFE, 0x34, 0x20,
	0xF5, 0x06, 0x19, 0x78, 0x86, 0x23, 0x05, 0x20, 0xFB, 0x86, 0x20, 0xFE, 0x3E, 0x01, 0xE0, 0x50 };

Memory::Memory() {
	highRAM[0x04] = 0x1E;
	highRAM[0x05] = 0x00;
	highRAM[0x06] = 0x00;
	highRAM[0x07] = 0xF8;
	highRAM[0x0F] = 0xE1;
	highRAM[0x10] = 0x80;
	highRAM[0x11] = 0xBF;
	highRAM[0x12] = 0xF3;
	highRAM[0x14] = 0xBF;
	highRAM[0x16] = 0x3F;
	highRAM[0x17] = 0x00;
	highRAM[0x19] = 0xBF;
	highRAM[0x1A] = 0x7F;
	highRAM[0x1B] = 0xFF;
	highRAM[0x1C] = 0x9F;
	highRAM[0x1E] = 0xBF;
	highRAM[0x20] = 0xFF;
	highRAM[0x21] = 0x00;
	highRAM[0x22] = 0x00;
	highRAM[0x23] = 0xBF;
	highRAM[0x24] = 0x77;
	highRAM[0x25] = 0xF3;
	highRAM[0x26] = 0xF1;
	highRAM[0x40] = 0x91;
	highRAM[0x41] = 0x85;
	highRAM[0x42] = 0x00;
	highRAM[0x43] = 0x00;
	highRAM[0x45] = 0x00;
	highRAM[0x47] = 0xFC;
	highRAM[0x48] = 0xFF;
	highRAM[0x49] = 0xFF;
	highRAM[0x4A] = 0x00;
	highRAM[0x4B] = 0x00;
	highRAM[0xFF] = 0x00;

	WorkRamBankIndex = 1;
	VRAMBankIndex = 0;

	memcpy(basicROM, BIOS, 0x100);
}

void Memory::Write(uint16 addr, byte value) {
	if (addr < 0x8000) {
		// Can we write to ROM?
		DEBUG_BREAK;
	}
	else if (addr < 0xA000) {
		// VRAM banking
		uint16 bankOffset = VRAMBankIndex * 0x2000;
		VRAM[addr - 0x8000 + bankOffset] = value;
	}
	else if (addr < 0xC000) {
		// Writing to the cartridge RAM
		DEBUG_BREAK;
	}
	else if (addr < 0xD000) {
		// Work RAM, bank 0
		WorkRam[addr - 0xC000] = value;
	}
	else if (addr < 0xE000) {
		// Work RAM with banking
		WorkRam[addr - 0xC000 + (WorkRamBankIndex * 0x1000)] = value;
	}
	else if (addr < 0xFE00) {
		// Echo RAM, don't know yet what to do with that
		DEBUG_BREAK;
	}
	else if (addr < 0xFEA0) {
		// Object Attribute Memory
		OAM[addr - 0xFE00] = value;
	}
	else if (addr < 0xFF00) {
		// Unusable memory
		DEBUG_BREAK;
	}
	else {
		// high ram?
		DEBUG_BREAK;
	}
}

byte Memory::Read(uint16 addr) {
	if (addr < 0x8000) {
		// Reading the ROM
		return basicROM[addr];
	}
	else if (addr < 0xA000) {
		// VRAM banking
		uint16 bankOffset = VRAMBankIndex * 0x2000;
		return VRAM[addr - 0x8000 + bankOffset];
	}
	else if (addr < 0xC000) {
		// Reading cartridge RAM
		DEBUG_BREAK;
	}
	else if (addr < 0xD000) {
		// Work RAM, bank 0
		return WorkRam[addr - 0xC000];
	}
	else if (addr < 0xE000) {
		// Work RAM with banking
		return WorkRam[addr - 0xC000 + (WorkRamBankIndex * 0x1000)];
	}
	else if (addr < 0xFE00) {
		// Echo RAM, don't know yet what to do with that
		DEBUG_BREAK;
	}
	else if (addr < 0xFEA0) {
		// Object Attribute Memory
		return OAM[addr - 0xFE00];
	}
	else if (addr < 0xFF00) {
		// Unusable memory
		DEBUG_BREAK;
	}
	else {
		// high ram?
		DEBUG_BREAK;
	}
	return 0xFF;
}